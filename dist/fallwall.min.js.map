{"version":3,"sources":["fallwall.js"],"names":["root","factory","exports","_typeof","module","require","define","amd","Fallwall","jQuery","undefined","$","defaults","_setFirstRoundContent","dataArray","callback_func","i","gridNumber","currentGrid","console","error","_appendGrids","thisCode","html_template","j","Object","keys","obj","length","replace","creatingElement","targetColumn","eq","_getShortestColumn","direction","prepend","find","first","last","addClass","defaultClass","heightArray","element","offsetHeight","push","minColumn","Math","inArray","fn","fallwall_init","template","options","Error","columnNumber","colElements","this","append","css","display","vertical-align","width","loadMoreFw","limitNum","addFwGrid","data"],"mappings":";;;;;;CAOC,SAASA,EAAMC,GAEI,YAAnB,mBAAOC,SAAP,YAAAC,QAAOD,WAA0C,mBAAXE,QAAyBA,OAAOF,QAAUD,EAAQI,QAAQ,WAC9E,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,UAAWL,GAHhED,EAAAQ,SAAeP,EAAfQ,SAAAC,OACA,SAAAC,GADA,GAAAC,MAUAC,EAAA,SAAAC,EAAAC,GAMC,IAAK,GAAIC,GAAI,EAAGA,EAAIJ,EAASK,YACD,mBAAhBH,GAAUE,GADmBA,IAF1CH,EAAAA,EAAwBG,GAAA,QAKrBJ,EAASM,YAAcF,CAIvBD,KACD,kBAAAA,GAICA,IADDI,QAAIC,MAAOL,EAAiB,wBAY9BM,EAAe,SAAfA,EAAAA,GAIC,IAAK,GAFDC,GAAWV,EAASW,cAEfC,EAAI,EAAGA,EAAIC,OAAOC,KAAKC,GAAKC,OAAQJ,IAC5CF,EAAWA,EAASO,QAAS,cAAAL,EAAcA,GAAdG,EAAoBA,GAGlD,IACIG,GADAC,EAAepB,EAAE,cAAcqB,GAAIC,IAEtB,OAAbC,GACHH,EAAaI,QAASb,GACtBQ,EAAkBC,EAAaK,KAAK,YAAYC,UAIhDP,EAAAA,OAAkBC,GAClBD,EAAAC,EAAAK,KAAA,YAAAE,QAO0B1B,IAA1BkB,EAAAA,cACAA,EAAAS,SAAA3B,EAAA4B,eAOFP,EAAqB,WAEpB,GAAIQ,KAGHA,GAAAA,KAAAA,EAAAA,cAAkBC,SAAQC,EAA1BD,GADDD,EAAAG,KAAAF,EAAAC,eAKA,IAAAE,GAAOC,KAAWD,IAAAA,MAAWJ,KAAAA,EAxE9B,OAAA9B,GAAAoC,QAAAF,EAAAJ,GAkFC9B,GAAAqC,GAAAC,cAAA,SAAAC,EAAApC,EAAAqC,EAAApC,GAKC,GAAA,MAAAmC,GAAA,MAAApC,EADA,KAAM,IAAIsC,OAAM,gDAMhBC,GAAAA,EAAAA,QACAb,WAAAA,GACAjB,aAAAA,EACAT,aAAWA,GACXI,cAAa,wBAAAgC,EAAA,SANHpC,UAAXA,EAMCI,YAAa,GAGdiC,EAIC,KAAA,GADAG,GAAe,GACftC,EAAA,EAAAA,EAAAJ,EAAAyC,aAAArC,IACDsC,GAAaA,+BAEbC,MAAAC,OAAAF,GAGCC,KAAAnB,KAAA,cAF2BqB,KAG3BC,QAAU,eAHXC,iBAAA,MAGCC,MAAU,IAAIhD,EAASyC,aAAc,MAItCxC,EAAuBC,EAAWC,IAOnCJ,EAAEqC,GAAGa,WAAa,SAAU9C,GAK1B,GAAAH,EAAIkD,YAAoB5C,EAAAA,EAAcN,UAASK,OAA/C,CADAL,EAASM,aAET,KAAK,GAEJ4C,GAAWlD,EAASE,YAAgBF,EAAAK,WAF5BD,EAAIJ,EAASM,YAAaF,EAAI8C,EAAU9C,IAAM,CAKrDJ,GAAA,mBAASM,GAAAA,UAATF,GAsBA,MAjBID,KASL,kBAAAA,GACAA,IAEEI,QAAIC,MAAOL,EAAiB,uBAKtB,cAPR,IAXCM,EAAAT,EAAAE,UAAAE,GAAA,QACAJ,EAAIG,YAAgBC,EAUjBA,GAAK8C,EAAS,EAOjB,MAOH/C,KAZgC,kBAAjBA,GACVA,IAeLI,QAAOC,MAAAL,EAAP,uBAXU,YAyBR,MAAI,gBAPPJ,EAAEqC,GAAGe,UAAY,SAAUC,EAAMjD,GAEhC,GAAmB,WAAf,mBAAOiD,GAAP,YAAA7D,QAAO6D,IAYV,KAAM,IAAIZ,OAAM,mCAAmCY,EAAK,kBAVxD3C,GAAc2C,EAAM,MAEhBjD,IACyB,kBAAjBA,GACVA,IAEAI,QAAQC,MAAML,EAAc","file":"fallwall.min.js","sourcesContent":["/*!\n * Fallwall.js\n *\n * Copyright Â© 2017 Eddie Wen | MIT license\n * https://github.com/EddieWen-Taiwan/Fallwall.js\n */\n\n(function(root, factory) {\n\t'use strict';\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n\ttypeof define === 'function' && define.amd ? define(['jquery'], factory) :\n\troot.Fallwall = factory(jQuery)\n}(this, function($) {\n\t'use strict';\n\n\tvar defaults = {},\n\n\t/**\n\t * call after initializing Fallwall\n\t * append grids in the zfirst round\n\t */\n\t_setFirstRoundContent = function( dataArray, callback_func ) {\n\n\t\tfor( var i = 0; i < defaults.gridNumber; i++ ) {\n\t\t\tif( typeof dataArray[i] != \"undefined\" ) {\n\t\t\t\t_appendGrids( dataArray[i], 'down' );\n\t\t\t\tdefaults.currentGrid = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif( callback_func ) {\n\t\t\tif( typeof callback_func == 'function' )\n\t\t\t\tcallback_func();\n\t\t\telse\n\t\t\t\tconsole.error(callback_func+' is not a function');\n\t\t}\n\n\t},\n\n\t/**\n\t * Add new grid\n\t * direction: up/down => grid is added at the top/bottom\n\t */\n\t_appendGrids = function( obj, direction ) {\n\n\t\tvar thisCode = defaults.html_template;\n\n\t\tfor( var j = 0; j < Object.keys(obj).length; j++ ) {\n\t\t\tthisCode = thisCode.replace( 'fallwall_#'+(j+1), obj[j] );\n\t\t}\n\n\t\tvar targetColumn = $('.fw_column').eq( _getShortestColumn() );\n\t\tvar creatingElement;\n\t\tif( direction == 'up' ) {\n\t\t\ttargetColumn.prepend( thisCode );\n\t\t\tcreatingElement = targetColumn.find('.fw_grid').first();\n\t\t}\n\t\telse {\n\t\t\ttargetColumn.append( thisCode );\n\t\t\tcreatingElement = targetColumn.find('.fw_grid').last();\n\t\t}\n\n\t\t/**\n\t\t * Add extra class\n\t\t * like animation class\n\t\t */\n\t\tif( defaults.defaultClass != '' ) {\n\t\t\tcreatingElement.addClass( defaults.defaultClass );\n\t\t}\n\n\t},\n\n\t/**\n\t * Return the shortest fw_column to append a new grid\n\t */\n\t_getShortestColumn = function() {\n\n\t\tvar heightArray = [];\n\n\t\t$.each( $('.fw_column'), function(index, element) {\n\t\t\theightArray.push( element.offsetHeight );\n\t\t});\n\n\t\tvar minColumn = Math.min.apply( null, heightArray );\n\t\treturn $.inArray( minColumn, heightArray );\n\n\t};\n\n\t/**\n\t * Fallwall construtcor\n\t * Setup template and data source\n\t */\n\t$.fn.fallwall_init = function( template, dataArray, options, callback_func ) {\n\n\t\t/**\n\t\t * check required parameters\n\t\t */\n\t\tif( template == null || dataArray == null ) {\n\t\t\tthrow new Error('You missed some parameters while initializing');\n\t\t}\n\n\t\t// Store data from user\n\t\tdefaults = $.extend({\n\t\t\tgridNumber: 20,\n\t\t\tcolumnNumber: 1,\n\t\t\tdefaultClass: '',\n\t\t\thtml_template: '<div class=\\'fw_grid\\'>'+template+'</div>',\n\t\t\tdataArray: dataArray,\n\t\t\tcurrentGrid: 0\n\t\t}, options);\n\n\t\t// Add columns\n\t\tvar colElements = '';\n\t\tfor( var i = 0; i < defaults.columnNumber; i++ ) {\n\t\t\tcolElements += '<div class=\\'fw_column\\'></div>';\n\t\t}\n\t\tthis.append( colElements );\n\n\t\t// Prepare CSS\n\t\tthis.find('.fw_column').css({\n\t\t\t'display': 'inline-block',\n\t\t\t'vertical-align': 'top',\n\t\t\t'width': (100/defaults.columnNumber)+'%'\n\t\t});\n\n\t\t// Add grids at first\n\t\t_setFirstRoundContent( dataArray, callback_func );\n\n\t};\n\n\t/**\n\t * load more data and append them\n\t */\n\t$.fn.loadMoreFw = function( callback_func ) {\n\n\t\tif( defaults.currentGrid +1 < defaults.dataArray.length ) {\n\n\t\t\tdefaults.currentGrid++;\n\t\t\tvar limitNum = defaults.currentGrid + defaults.gridNumber;\n\t\t\tfor( var i = defaults.currentGrid; i < limitNum; i++ ) {\n\n\t\t\t\tif( typeof defaults.dataArray[i] != \"undefined\" ) {\n\n\t\t\t\t\t_appendGrids( defaults.dataArray[i], 'down' );\n\t\t\t\t\tdefaults.currentGrid = i;\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Data is exhausted before last run in loop\n\t\t\t\t\tif( callback_func ) {\n\t\t\t\t\t\tif( typeof callback_func == 'function' )\n\t\t\t\t\t\t\tcallback_func();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tconsole.error(callback_func+' is not a function');\n\t\t\t\t\t}\n\t\t\t\t\treturn \"NO_MORE_DATA\";\n\t\t\t\t}\n\n\t\t\t\t// Last run in loop\n\t\t\t\tif( i == limitNum-1 ) {\n\t\t\t\t\tif( callback_func ) {\n\t\t\t\t\t\tif( typeof callback_func == 'function' )\n\t\t\t\t\t\t\tcallback_func();\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tconsole.error(callback_func+' is not a function');\n\t\t\t\t\t}\n\t\t\t\t\treturn \"FINISHED\";\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/***\n\t\t * There is no more data.\n\t\t * All is displayed.\n\t\t***/\n\t\treturn \"NO_MORE_DATA\";\n\n\t};\n\n\t/**\n\t * directly append a new grid at the top of one column\n\t */\n\t$.fn.addFwGrid = function( data, callback_func ) {\n\n\t\tif( typeof data == 'object' ) {\n\t\t\t// Add a new grid\n\t\t\t_appendGrids( data, 'up' );\n\n\t\t\tif( callback_func ) {\n\t\t\t\tif( typeof callback_func == 'function' )\n\t\t\t\t\tcallback_func();\n\t\t\t\telse\n\t\t\t\t\tconsole.error(callback_func+' is not a function');\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new Error('First parameter of addFwGrid(): '+data+' must be Object');\n\t\t}\n\n\t};\n\n}));\n"]}