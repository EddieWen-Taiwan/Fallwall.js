{"version":3,"sources":["fallwall.js"],"names":["root","factory","exports","_typeof","module","require","define","amd","Fallwall","jQuery","window","undefined","$","DOWN","UP","GRID","COLUMN","gridNumber","columnNumber","defaultClass","_setFirstRoundContent","dataArray","callbackFunction","i","defaults","_appendGrids","console","error","obj","thisCode","html_template","j","Object","keys","length","replace","targetColumn","className","eq","_getShortestColumn","creatingElement","direction","prepend","find","first","last","addClass","heightArray","each","index","element","push","offsetHeight","indexOf","Math","min","apply","fn","fallwall","template","options","Array","Error","isArray","colElements","repeat","display","this","css","vertical-align","width","floor","loadMoreFw","currentGrid","limitNum","data"],"mappings":"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","file":"fallwall.min.js","sourcesContent":["/*!\n * Fallwall.js\n *\n * Copyright Â© 2017 Eddie Wen | MIT license\n * https://github.com/EddieWen-Taiwan/Fallwall.js\n */\n\n((root, factory) => {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('jquery')) :\n\ttypeof define === 'function' && define.amd ? define(['jquery'], factory) :\n\troot ? root.Fallwall = factory(jQuery) :\n\twindow.Fallwall = factory(jQuery)\n})(this, ($) => {\n\n\tconst DOWN = 'down';\n\tconst UP = 'up';\n\n\tconst className = {\n\t\tGRID: '.fw_grid',\n\t\tCOLUMN: '.fw_column',\n\t};\n\n\tlet defaults = {\n\t\tgridNumber: 20,\n\t\tcolumnNumber: 1,\n\t\tdefaultClass: '',\n\t\tcurrentGrid: 0,\n\t\tdataArray: [],\n\t};\n\n\t/**\n\t * call after initializing Fallwall\n\t * append grids in the zfirst round\n\t */\n\tconst _setFirstRoundContent = ( dataArray, callbackFunction ) => {\n\n\t\tfor( let i = 0; i < defaults.gridNumber; i++ ) {\n\t\t\tif( dataArray[i] ) {\n\t\t\t\t_appendGrids( dataArray[i], DOWN );\n\t\t\t\tdefaults.currentGrid = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif( callbackFunction ) {\n\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\tcallbackFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t}\n\t\t}\n\n\t};\n\n\t/**\n\t * Add new grid\n\t * direction: up/down => grid is added at the top/bottom\n\t */\n\tconst _appendGrids = ( obj, direction ) => {\n\n\t\tlet thisCode = defaults.html_template;\n\n\t\tfor( let j = 0; j < Object.keys(obj).length; j++ ) {\n\t\t\tthisCode = thisCode.replace( `fallwall_#${j+1}`, obj[j] );\n\t\t}\n\n\t\tconst targetColumn = $(className.COLUMN).eq( _getShortestColumn() );\n\t\tlet creatingElement;\n\t\tif( direction === UP ) {\n\t\t\ttargetColumn.prepend( thisCode );\n\t\t\tcreatingElement = targetColumn.find(className.GRID).first();\n\t\t}\n\t\telse if( direction === DOWN ) {\n\t\t\ttargetColumn.append( thisCode );\n\t\t\tcreatingElement = targetColumn.find(className.GRID).last();\n\t\t}\n\n\t\t/**\n\t\t * Add extra class\n\t\t * like animation class\n\t\t */\n\t\tif( defaults.defaultClass ) {\n\t\t\tcreatingElement.addClass( defaults.defaultClass );\n\t\t}\n\n\t};\n\n\t/**\n\t * Return the shortest fw_column to append a new grid\n\t */\n\tconst _getShortestColumn = () => {\n\n\t\tlet heightArray = [];\n\n\t\t$.each($(className.COLUMN), (index, element) => {\n\t\t\theightArray.push( element.offsetHeight );\n\t\t});\n\n\t\treturn heightArray.indexOf( Math.min(...heightArray) );\n\n\t};\n\n\t/**\n\t * Fallwall construtcor\n\t * Setup template and data source\n\t */\n\t$.fn.fallwall = function( template, dataArray, options, callbackFunction ) {\n\n\t\t/**\n\t\t * check required parameters\n\t\t */\n\t\tif( !template ) {\n\t\t\tthrow new Error('missed HTML template');\n\t\t}\n\n\t\tif( !dataArray ) {\n\t\t\tthrow new Error('missed data source');\n\t\t}\n\t\tif( !Array.isArray(dataArray) || dataArray.length === 0 ) {\n\t\t\tthrow new Error('typeof dataArray is not correct');\n\t\t}\n\n\t\t// Store data from user\n\t\tdefaults = {\n\t\t\t...defaults,\n\t\t\thtml_template: `<div class='fw_grid'>${template}</div>`,\n\t\t\tdataArray: dataArray,\n\t\t\t...options,\n\t\t};\n\n\t\t// Add columns\n\t\tlet colElements = '<div class=\\'fw_column\\'></div>'.repeat(defaults.columnNumber);\n\t\tthis.append( colElements );\n\n\t\t// Prepare CSS\n\t\tthis.find(className.COLUMN).css({\n\t\t\t'vertical-align': 'top',\n\t\t\tdisplay: 'inline-block',\n\t\t\twidth: `${Math.floor(1000/defaults.columnNumber)/10}%`,\n\t\t});\n\n\t\t// Add grids at first\n\t\t_setFirstRoundContent( dataArray, callbackFunction );\n\n\t};\n\n\t/**\n\t * load more data and append them\n\t */\n\t$.fn.loadMoreFw = ( callbackFunction ) => {\n\n\t\t/**\n\t\t * fallwall initialization is not yet completed\n\t\t */\n\t\tif( defaults.dataArray.length === 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif( defaults.currentGrid + 1 < defaults.dataArray.length ) {\n\n\t\t\tdefaults.currentGrid++;\n\t\t\tconst limitNum = defaults.currentGrid + defaults.gridNumber;\n\t\t\tfor( let i = defaults.currentGrid; i < limitNum; i++ ) {\n\n\t\t\t\tif( defaults.dataArray[i] ) {\n\n\t\t\t\t\t_appendGrids( defaults.dataArray[i], DOWN );\n\t\t\t\t\tdefaults.currentGrid = i;\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/**\n\t\t\t\t\t * Data is exhausted before last run in loop\n\t\t\t\t\t */\n\t\t\t\t\tif( callbackFunction ) {\n\t\t\t\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\t\t\t\tcallbackFunction();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn 'NO_MORE_DATA';\n\t\t\t\t}\n\n\t\t\t\t/**\n\t\t\t\t * it is the last run of this loop\n\t\t\t\t */\n\t\t\t\tif( i === limitNum - 1 ) {\n\t\t\t\t\tif( callbackFunction ) {\n\t\t\t\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\t\t\t\tcallbackFunction();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn 'FINISHED';\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t/**\n\t\t * There is no more data.\n\t\t */\n\t\treturn 'NO_MORE_DATA';\n\n\t};\n\n\t/**\n\t * directly append a new grid at the top of one column\n\t */\n\t$.fn.addFwGrid = ( data, callbackFunction ) => {\n\n\t\tif( typeof data !== 'object' ) {\n\t\t\tthrow new Error(`First parameter of addFwGrid(): ${data} must be Object`);\n\t\t}\n\n\t\t// Add a new grid\n\t\t_appendGrids( data, UP );\n\n\t\tif( callbackFunction ) {\n\t\t\tif( typeof callbackFunction === 'function' ) {\n\t\t\t\tcallbackFunction();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.error(`${callbackFunction} is not a function`);\n\t\t\t}\n\t\t}\n\n\t};\n\n});\n"]}